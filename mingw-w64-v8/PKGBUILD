# Maintainer: Rodrigo Hernandez <kwizatz@aeongames.com>
_realname=v8
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=9.1.269.38
pkgrel=1
pkgdesc="Fast and modern Javascript engine (mingw-w64)"
arch=('any')
url="https://v8.dev"
license=("BSD")
makedepends=("${MINGW_PACKAGE_PREFIX}-python" "${MINGW_PACKAGE_PREFIX}-ninja")
depends=("${MINGW_PACKAGE_PREFIX}-zlib")
source=("bare-clones/gn::git+https://gn.googlesource.com/gn#tag=5da62d5e9d0f10cb8ece7c30563a6a214c78b68d"
        "https://github.com/v8/v8/archive/refs/tags/${pkgver}.zip"
        "bare-clones/build::git+https://chromium.googlesource.com/chromium/src/build.git#commit=acacc4cc0668cb4dc7f44a3f4430635f438d7478"
        "bare-clones/zlib::git+https://chromium.googlesource.com/chromium/src/third_party/zlib.git#commit=09490503d0f201b81e03f5ca0ab8ba8ee76d4a8e"
        "bare-clones/common::git+https://chromium.googlesource.com/chromium/src/base/trace_event/common.git#commit=cab90cbdaaf4444d67aef6ce3cef09fc5fdeb560"
        "bare-clones/googletest::git+https://chromium.googlesource.com/external/github.com/google/googletest.git#commit=10b1902d893ea8cc43c69541d70868f91af3646b"
        "bare-clones/jinja2::git+https://chromium.googlesource.com/chromium/src/third_party/jinja2.git#commit=11b6b3e5971d760bd2d310f77643f55a818a6d25"
        "bare-clones/markupsafe::git+https://chromium.googlesource.com/chromium/src/third_party/markupsafe.git#commit=0944e71f4b2cb9a871bcbe353f95e889b64a611a"
        "0000-add-mingw-main-code-changes.patch"
        "0001-add-mingw-toolchain.patch"
        "0002-gn-ninja-deletes-objs-workaround.patch"
        "icu.gn"
        "zlib.gn"
        "v8.pc"
        "https://github.com/v8/v8/commit/6930df0.patch")
sha256sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            '63d759de8bad9b8ac8879f8e69c24e62bf71fe14396cbdd190d48cabf8335800'
            'b831576af25b275fca72851ec275c9d21bee0be29b4eb973a3e2a2580deac003'
            'c10169e7a34e212b1a2bf0eaf45131485719f32a7c34d9a666b692f05a2aa830'
            'b99874ea904724911528a5530c14f3051c358805bd36df9d205df31458ebf8b9'
            'SKIP'
            'SKIP')
options=('strip' 'staticlibs')

prepare() {
  echo "Preparing GN source"
  cd "${srcdir}"/gn
  git apply ${srcdir}/0002-gn-ninja-deletes-objs-workaround.patch
  sed -i.bak "/-lwinmm/a '-lpsapi'," build/gen.py
  python build/gen.py --out-path=out/${CARCH} --platform=mingw

  echo "Patching v8 source"
  cd "${srcdir}"/v8-${pkgver}
  patch -p1 < ${srcdir}/0000-add-mingw-main-code-changes.patch
  patch -Rp1 -i ${srcdir}/6930df0.patch

  echo "Patching build directory"
  cd "${srcdir}"/build
  git apply ${srcdir}/0001-add-mingw-toolchain.patch
  python "${srcdir}"/build/util/lastchange.py -o "${srcdir}"/build/util/LASTCHANGE
  rm -rf "${srcdir}"/v8-${pkgver}/build
  ln -sf "${srcdir}"/build "${srcdir}"/v8-${pkgver}
  echo "checkout_google_benchmark = false" > "${srcdir}"/v8-${pkgver}/build/config/gclient_args.gni

  echo "Patching zlib directory"
  mkdir -p "${srcdir}"/v8-${pkgver}/third_party/zlib
  ln -sf "${srcdir}"/zlib.gn "${srcdir}"/v8-${pkgver}/third_party/zlib/BUILD.gn
  rm -rf "${srcdir}"/v8-${pkgver}/third_party/zlib/google
  ln -sf "${srcdir}"/zlib/google "${srcdir}"/v8-${pkgver}/third_party/zlib
  
  echo "Patching icu directory"
  mkdir -p "${srcdir}"/v8-${pkgver}/third_party/icu
  ln -sf "${srcdir}"/icu.gn "${srcdir}"/v8-${pkgver}/third_party/icu/BUILD.gn

  echo "Soft linking extra repos"
  mkdir -p ${srcdir}/v8-${pkgver}/base/trace_event
  rm -rf ${srcdir}/v8-${pkgver}/base/trace_event/common
  ln -sf "${srcdir}"/common ${srcdir}/v8-${pkgver}/base/trace_event
  rm -rf "${srcdir}"/v8-${pkgver}/third_party/googletest/src
  ln -sf "${srcdir}"/googletest "${srcdir}"/v8-${pkgver}/third_party/googletest/src
  rm -rf "${srcdir}"/v8-${pkgver}/third_party/jinja2
  ln -sf "${srcdir}"/jinja2 "${srcdir}"/v8-${pkgver}/third_party
  rm -rf "${srcdir}"/v8-${pkgver}/third_party/markupsafe
  ln -sf "${srcdir}"/markupsafe "${srcdir}"/v8-${pkgver}/third_party

  _cflags=""
  case ${CARCH} in
    x86_64)
      _cflags="$_cflags -DV8_COMPRESS_POINTERS -DV8_31BIT_SMIS_ON_64BIT_ARCH"
    ;;
  esac

  sed "s/@VERSION@/$pkgver/g" -i "$srcdir/v8.pc"
  sed "s/@CFLAGS@/$_cflags/g" -i "$srcdir/v8.pc"
  sed "s|^prefix=.*|prefix=${MINGW_PREFIX}|g" -i "$srcdir/v8.pc"
}

build() {
  local BUILDTYPE=Release
  case ${CARCH} in
    i686)
      _arch=x86
      _ignorefail=true
    ;;
    x86_64)
      _arch=x64
      _ignorefail=false
    ;;
  esac

  export DEPOT_TOOLS_WIN_TOOLCHAIN=0
  cd "${srcdir}"/gn
  ninja -C out/${CARCH} gn.exe

  cd "${srcdir}"/v8-${pkgver}
  "${srcdir}"/gn/out/${CARCH}/gn gen "${PWD}/out/${BUILDTYPE}-${CARCH}" \
    --args="v8_monolithic=true v8_static_library=true is_debug=false use_gold=false target_cpu=\"${_arch}\" is_clang=false use_custom_libcxx=false v8_enable_verify_heap=false v8_enable_i18n_support=false enable_iterator_debugging=false v8_use_external_startup_data=false" || ${_ignorefail}
  ninja -C "${PWD}/out/${BUILDTYPE}-${CARCH}" :v8_monolith :d8
}

package() {
  cd "${_realname}-${pkgver}"
  local BUILDTYPE=Release
  install -d "$pkgdir"/${MINGW_PREFIX}/bin
  install -Dm755 out/${BUILDTYPE}-${CARCH}/d8.exe "$pkgdir"/${MINGW_PREFIX}/bin/d8.exe
  install -d "$pkgdir"/${MINGW_PREFIX}/lib
  install -Dm755 out/${BUILDTYPE}-${CARCH}/obj/libv8_monolith.a "$pkgdir"/${MINGW_PREFIX}/lib/

  install -d "$pkgdir"/${MINGW_PREFIX}/include
  install -Dm644 include/*.h "$pkgdir"/${MINGW_PREFIX}/include
  install -d "$pkgdir"/${MINGW_PREFIX}/include/cppgc
  install -Dm644 include/cppgc/*.h "$pkgdir"/${MINGW_PREFIX}/include/cppgc
  install -d "$pkgdir"/${MINGW_PREFIX}/include/cppgc/internal
  install -Dm644 include/cppgc/internal/*.h "$pkgdir"/${MINGW_PREFIX}/include/cppgc/internal
  install -d "$pkgdir"/${MINGW_PREFIX}/include/libplatform
  install -Dm644 include/libplatform/*.h "$pkgdir"/${MINGW_PREFIX}/include/libplatform

  install -d "$pkgdir"/${MINGW_PREFIX}/lib/pkgconfig
  install -m644 "$srcdir/v8.pc" "$pkgdir"/${MINGW_PREFIX}/lib/pkgconfig/

  install -d "$pkgdir"/${MINGW_PREFIX}/share/licenses/v8
  install -m644 LICENSE* "$pkgdir"/${MINGW_PREFIX}/share/licenses/v8

  # Jeroen: fix annoying warning
  sed -i 's/#if V8_HAS_CPP_ATTRIBUTE_NODISCARD/#if 0/' "$pkgdir"/${MINGW_PREFIX}/include/v8config.h
}
